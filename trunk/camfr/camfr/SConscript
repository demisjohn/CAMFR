Import('env', 'env_noopt')

# Build some files without optimisation.

noopt = []
noopt.append(env_noopt.SharedObject(source = 'defs.cpp'))
noopt.append(env_noopt.SharedObject(source = 'math/bessel/slatec/limits.c'))
noopt.append(env_noopt.SharedObject(source = 'camfr_wrap.cpp'))
noopt.append(env_noopt.SharedObject(source = 'camfr_wrap_2.cpp'))

# Contruct names of all Fortran files.

fortran_files = ["math/calculus/polyroot/jenkins_traub.f"]

slatec = "dyairy.f xerhlt.f zbesh.f zlog.f zuni1.f d1mach.f dbesy1.f \
	  fdump.f xermsg.f zbesj.f zmlri.f zuni2.f dbesy.f i1mach.f xerprn.f \
	  zbesy.f zmlt.f zunik.f d9b0mp.f dbsynu.f initds.f xersve.f zbinu.f \
	  zrati.f zunk1.f d9b1mp.f dcsevl.f j4save.f xgetua.f zbknu.f \
	  zs1s2.f zunk2.f d9lgmc.f dgamlm.f zabs.f zbuni.f zseri.f zuoik.f \
	  dasyjy.f dgamln.f zacai.f zbunk.f zshch.f zwrsk.f dbesj0.f dgamma.f \
	  zacon.f zdiv.f zsqrt.f dbesj1.f djairy.f zairy.f zexp.f zuchk.f \
	  dbesj.f dlngam.f xercnt.f zasyi.f zkscl.f zunhj.f dbesy0.f"

slatec_names = slatec.split()
for i in range(len(slatec_names)):
  fortran_files.append('math/bessel/slatec/' + slatec_names[i])

if env['F77'] == "":
  fortran_files = []

# Build CAMFR library.

env.SharedLibrary(target = '_camfr',
	    source = ['material.cpp', 'coord.cpp', 'field.cpp', 'mode.cpp',
		      'waveguide.cpp', 'scatterer.cpp', 'chunk.cpp',
		      'interface.cpp', 'icache.cpp', 'expression.cpp',
		      'stack.cpp', 'S_scheme.cpp', 'T_scheme.cpp',
		      'S_scheme_fields.cpp', 'T_scheme_fields.cpp',
	              'cavity.cpp', 'bloch.cpp', 'infstack.cpp',
		      'util/cvector.cpp', 'util/index.cpp',
		      'util/tracesorter.cpp',
		      'math/bessel/bessel.cpp',
		      'math/linalg/linalg.cpp',
		      'math/calculus/root/root.cpp',
	              'math/calculus/croot/allroots.cpp',
	              'math/calculus/croot/contour.cpp',
   		      'math/calculus/croot/patterson_z_n.cpp',
	              'math/calculus/croot/mueller.cpp',
		      'math/calculus/polyroot/polyroot.cpp',
		      'math/calculus/traceroot/traceroot.cpp',
		      'math/calculus/quadrature/patterson.cpp',
		      'math/calculus/quadrature/patterson_quad.cpp',
		      'math/calculus/minimum/minimum.cpp',
		      'math/calculus/fourier/fourier.cpp',
		      'primitives/planar/planar.cpp',
		      'primitives/circ/circ.cpp',
		      'primitives/circ/circmode.cpp',
		      'primitives/circ/circdisp.cpp',
		      'primitives/circ/circoverlap.cpp',
		      'primitives/circ/circ_M_util.cpp',
		      'primitives/slab/generalslab.cpp',
		      'primitives/slab/slabmatrixcache.cpp',
		      'primitives/slab/isoslab/slab.cpp',
		      'primitives/slab/isoslab/slaboverlap.cpp',
		      'primitives/slab/isoslab/slabdisp.cpp',
		      'primitives/slab/isoslab/slabwall.cpp',
                      'primitives/slab/isoslab/slabmode.cpp',
		      'primitives/section/section.cpp',		      
		      'primitives/section/sectionmode.cpp',
		      'primitives/section/sectiondisp.cpp',
		      'primitives/section/sectionoverlap.cpp',
		      'primitives/section/refsection.cpp',
		      'primitives/blochsection/blochsection.cpp',
		      'primitives/blochsection/blochsectionmode.cpp',
		      'primitives/blochsection/blochsectionoverlap.cpp']
		      + noopt + fortran_files)
