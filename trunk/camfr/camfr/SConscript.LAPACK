Import('env', 'env_noopt') 

# Build some files without optimisation. 

noopt = [] 
noopt.append(env_noopt.SharedObject(source = 'defs.cpp')) 
noopt.append(env_noopt.SharedObject(source = 'math/bessel/slatec/limits.c')) 

# Contruct names of all Fortran files. 

fortran_files = ["math/calculus/polyroot/jenkins_traub.f"] 

slatec = "dyairy.f xerhlt.f zbesh.f zlog.f zuni1.f d1mach.f dbesy1.f \
          fdump.f xermsg.f zbesj.f zmlri.f zuni2.f dbesy.f i1mach.f xerprn.f \
          zbesy.f zmlt.f zunik.f d9b0mp.f dbsynu.f initds.f xersve.f zbinu.f \
          zrati.f zunk1.f d9b1mp.f dcsevl.f j4save.f xgetua.f zbknu.f \
          zs1s2.f zunk2.f d9lgmc.f dgamlm.f zabs.f zbuni.f zseri.f zuoik.f \
          dasyjy.f dgamln.f zacai.f zbunk.f zshch.f zwrsk.f dbesj0.f dgamma.f \
          zacon.f zdiv.f zsqrt.f dbesj1.f djairy.f zairy.f zexp.f zuchk.f \
          dbesj.f dlngam.f xercnt.f zasyi.f zkscl.f zunhj.f dbesy0.f"

blas = "cgemv.f cgbmv.f chemv.f chbmv.f chpmv.f \
        ctrmv.f ctbmv.f ctpmv.f ctrsv.f ctbsv.f ctpsv.f \
        cgerc.f cgeru.f cher.f chpr.f cher2.f chpr2.f \
        dgemv.f dgbmv.f dsymv.f dsbmv.f dspmv.f \
        dtrmv.f dtbmv.f dtpmv.f dtrsv.f dtbsv.f dtpsv.f \
        dger.f dsyr.f dspr.f dsyr2.f dspr2.f \
        zgemv.f zgbmv.f zhemv.f zhbmv.f zhpmv.f \
        ztrmv.f ztbmv.f ztpmv.f ztrsv.f ztbsv.f ztpsv.f \
        zgerc.f zgeru.f zher.f zhpr.f zher2.f zhpr2.f \
        sgemm.f ssymm.f ssyrk.f ssyr2k.f strmm.f strsm.f \
        cgemm.f csymm.f csyrk.f csyr2k.f ctrmm.f ctrsm.f \
        chemm.f cherk.f cher2k.f \
        dgemm.f dsymm.f dsyrk.f dsyr2k.f dtrmm.f dtrsm.f \
        zgemm.f zsymm.f zsyrk.f zsyr2k.f ztrmm.f ztrsm.f \
        zhemm.f zherk.f zher2k.f \
        lsame.f xerbla.f \
        zdscal.f zswap.f zdotc.f izamax.f zaxpy.f zcopy.f dznrm2.f idamax.f ddot.f \
        zscal.f dscal.f dcopy.f dnrm2.f dcabs1.f dzasum.f zdotu.f dswap.f drot.f \
        daxpy.f dasum.f"

lapack = "zbdsqr.f zgbbrd.f zgbcon.f zgbequ.f zgbrfs.f zgbsv.f  zgbsvx.f \
        zgbtf2.f zgbtrf.f zgbtrs.f zgebak.f zgebal.f zgebd2.f zgebrd.f \
        zgecon.f zgeequ.f zgees.f  zgeesx.f zgeev.f  zgeevx.f \
        zgegs.f  zgegv.f  zgehd2.f zgehrd.f zgelq2.f zgelqf.f \
        zgels.f  zgelsd.f zgelss.f zgelsx.f zgelsy.f zgeql2.f zgeqlf.f zgeqp3.f \
        zgeqpf.f zgeqr2.f zgeqrf.f zgerfs.f zgerq2.f zgerqf.f \
        zgesc2.f zgesdd.f zgesv.f  zgesvd.f zgesvx.f zgetc2.f zgetf2.f zgetrf.f \
        zgetri.f zgetrs.f zggbak.f zggbal.f zgges.f  zggesx.f zggev.f  zggevx.f \
        zggglm.f zgghrd.f zgglse.f zggqrf.f zggrqf.f zggsvd.f zggsvp.f \
        zgtcon.f zgtrfs.f zgtsv.f  zgtsvx.f zgttrf.f zgttrs.f zgtts2.f zhbev.f  \
        zhbevd.f zhbevx.f zhbgst.f zhbgv.f  zhbgvd.f zhbgvx.f zhbtrd.f \
        zhecon.f zheev.f  zheevd.f zheevr.f zheevx.f zhegs2.f zhegst.f \
        zhegv.f  zhegvd.f zhegvx.f zherfs.f zhesv.f  zhesvx.f zhetd2.f \
        zhetf2.f zhetrd.f zhetrf.f zhetri.f zhetrs.f zhgeqz.f zhpcon.f zhpev.f \
        zhpevd.f zhpevx.f zhpgst.f zhpgv.f  zhpgvd.f zhpgvx.f zhprfs.f zhpsv.f  \
        zhpsvx.f zhptrd.f zhptrf.f zhptri.f zhptrs.f zhsein.f zhseqr.f zlabrd.f \
        zlacgv.f zlacon.f zlacp2.f zlacpy.f zlacrm.f zlacrt.f zladiv.f \
        zlaed0.f zlaed7.f zlaed8.f zlaein.f zlaesy.f zlaev2.f zlags2.f zlagtm.f \
        zlahef.f zlahqr.f zlahrd.f zlaic1.f zlals0.f zlalsa.f zlalsd.f zlangb.f \
        zlange.f zlangt.f zlanhb.f zlanhe.f zlanhp.f zlanhs.f zlanht.f zlansb.f \
        zlansp.f zlansy.f zlantb.f zlantp.f zlantr.f zlapll.f zlapmt.f zlaqgb.f \
        zlaqge.f zlaqhb.f zlaqhe.f zlaqhp.f zlaqp2.f zlaqps.f zlaqsb.f \
        zlaqsp.f zlaqsy.f zlar1v.f zlar2v.f zlarcm.f zlarf.f  zlarfb.f \
        zlarfg.f zlarft.f zlarfx.f zlargv.f zlarnv.f zlarrv.f zlartg.f zlartv.f \
        zlarz.f  zlarzb.f zlarzt.f zlascl.f zlaset.f zlasr.f  zlassq.f zlaswp.f \
        zlasyf.f zlatbs.f zlatdf.f zlatps.f zlatrd.f zlatrs.f zlatrz.f zlatzm.f \
        zlauu2.f zlauum.f zpbcon.f zpbequ.f zpbrfs.f zpbstf.f zpbsv.f  \
        zpbsvx.f zpbtf2.f zpbtrf.f zpbtrs.f zpocon.f zpoequ.f zporfs.f \
        zposv.f  zposvx.f zpotf2.f zpotrf.f zpotri.f zpotrs.f zppcon.f \
        zppequ.f zpprfs.f zppsv.f  zppsvx.f zpptrf.f zpptri.f zpptrs.f \
        zptcon.f zpteqr.f zptrfs.f zptsv.f  zptsvx.f zpttrf.f zpttrs.f zptts2.f \
        zrot.f   zspcon.f zspmv.f  zspr.f   zsprfs.f zspsv.f  \
        zspsvx.f zsptrf.f zsptri.f zsptrs.f zdrot.f  zdrscl.f zstedc.f \
        zstegr.f zstein.f zsteqr.f zsycon.f zsymv.f  \
        zsyr.f   zsyrfs.f zsysv.f  zsysvx.f zsytf2.f zsytrf.f zsytri.f \
        zsytrs.f ztbcon.f ztbrfs.f ztbtrs.f ztgevc.f ztgex2.f \
        ztgexc.f ztgsen.f ztgsja.f ztgsna.f ztgsy2.f ztgsyl.f ztpcon.f \
        ztprfs.f ztptri.f ztptrs.f ztrcon.f ztrevc.f ztrexc.f ztrrfs.f ztrsen.f \
        ztrsna.f ztrsyl.f ztrti2.f ztrtri.f ztrtrs.f ztzrqf.f ztzrzf.f zung2l.f \
        zung2r.f zungbr.f zunghr.f zungl2.f zunglq.f zungql.f zungqr.f zungr2.f \
        zungrq.f zungtr.f zunm2l.f zunm2r.f zunmbr.f zunmhr.f zunml2.f \
        zunmlq.f zunmql.f zunmqr.f zunmr2.f zunmr3.f zunmrq.f zunmrz.f \
        zunmtr.f zupgtr.f zupmtr.f izmax1.f dzsum1.f dbdsdc.f \
        dbdsqr.f ddisna.f dlabad.f dlacpy.f dladiv.f dlae2.f  dlaebz.f \
        dlaed0.f dlaed1.f dlaed2.f dlaed3.f dlaed4.f dlaed5.f dlaed6.f \
        dlaed7.f dlaed8.f dlaed9.f dlaeda.f dlaev2.f dlagtf.f \
        dlagts.f dlamch.f dlamrg.f dlanst.f dlapy2.f dlapy3.f dlarnv.f \
        dlarrb.f dlarre.f dlarrf.f dlartg.f dlaruv.f dlas2.f  dlascl.f \
        dlasd0.f dlasd1.f dlasd2.f dlasd3.f dlasd4.f dlasd5.f dlasd6.f \
        dlasd7.f dlasd8.f dlasd9.f dlasda.f dlasdq.f dlasdt.f \
        dlaset.f dlasq1.f dlasq2.f dlasq3.f dlasq4.f dlasq5.f dlasq6.f \
        dlasr.f  dlasrt.f dlassq.f dlasv2.f dpttrf.f dstebz.f dstedc.f \
        dsteqr.f dsterf.f dsecnd.f ilaenv.f ieeeck.f lsamen.f"

slatec_names = slatec.split() 
for i in range(len(slatec_names)): 
  fortran_files.append('math/bessel/slatec/' + slatec_names[i]) 

lapack_names = lapack.split() 
for i in range(len(lapack_names)): 
  print lapack_names[i] 
  fortran_files.append('D:/lib/Lapack/SRC/' + lapack_names[i]) 

blas_names = blas.split() 
for i in range(len(blas_names)): 
  print blas_names[i] 
  fortran_files.append('D:/lib/Lapack/Blas/SRC/' + blas_names[i]) 

# Build CAMFR library. 

env.SharedLibrary(target = '_camfr', 
            source = ['material.cpp', 'coord.cpp', 'field.cpp', 'mode.cpp', 
                      'waveguide.cpp', 'scatterer.cpp', 'chunk.cpp', 
                      'interface.cpp', 'icache.cpp', 'expression.cpp', 
                      'stack.cpp', 'S_scheme.cpp', 'T_scheme.cpp', 
                      'S_scheme_fields.cpp', 'T_scheme_fields.cpp', 
                      'cavity.cpp', 'bloch.cpp', 'infstack.cpp', 
                      'util/cvector.cpp', 'util/index.cpp', 
                      'camfr_wrap.cpp', 
                      'util/tracesorter.cpp', 
                      'math/bessel/bessel.cpp', 
                      'math/linalg/linalg.cpp', 
                      'math/calculus/root/root.cpp', 
                      'math/calculus/croot/allroots.cpp', 
                      'math/calculus/croot/contour.cpp', 
                      'math/calculus/croot/patterson_z_n.cpp', 
                      'math/calculus/croot/mueller.cpp', 
                      'math/calculus/polyroot/polyroot.cpp', 
                      'math/calculus/traceroot/traceroot.cpp', 
                      'math/calculus/quadrature/patterson.cpp', 
                      'math/calculus/quadrature/patterson_quad.cpp', 
                      'math/calculus/minimum/minimum.cpp', 
                      'primitives/planar/planar.cpp', 
                      'primitives/circ/circ.cpp', 
                      'primitives/circ/circmode.cpp', 
                      'primitives/circ/circdisp.cpp', 
                      'primitives/circ/circoverlap.cpp',
                      'primitives/circ/circ_M_util.cpp', 
                      'primitives/slab/generalslab.cpp', 
                      'primitives/slab/slabmatrixcache.cpp', 
                      'primitives/slab/isoslab/slab.cpp', 
                      'primitives/slab/isoslab/slaboverlap.cpp', 
                      'primitives/slab/isoslab/slabdisp.cpp', 
                      'primitives/slab/isoslab/slabwall.cpp', 
                      'primitives/slab/isoslab/slabmode.cpp', 
                      'primitives/section/section.cpp', 
                      'primitives/section/sectionmode.cpp', 
                      'primitives/section/sectiondisp.cpp', 
                      'primitives/section/sectionoverlap.cpp',
                      'primitives/section/refsection.cpp'] 
                      + noopt + fortran_files)

